<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ruby-&#39;s Blog</title>
  
  <subtitle>Re 爆肝魔王幹部的地球之旅</subtitle>
  <link href="/ruby-.github.io/atom.xml" rel="self"/>
  
  <link href="https://ruby-.github.io/"/>
  <updated>2019-09-18T14:25:38.000Z</updated>
  <id>https://ruby-.github.io/</id>
  
  <author>
    <name>R5by</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s-basics</title>
    <link href="https://ruby-.github.io/2019/09/17/k8s-basics/"/>
    <id>https://ruby-.github.io/2019/09/17/k8s-basics/</id>
    <published>2019-09-18T01:56:46.000Z</published>
    <updated>2019-09-18T14:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Demo-of-Kubernetes-Basics"><a href="#Demo-of-Kubernetes-Basics" class="headerlink" title="Demo of Kubernetes Basics"></a>Demo of Kubernetes Basics</h1><h2 id="Server-Overview"><a href="#Server-Overview" class="headerlink" title="Server Overview"></a>Server Overview</h2><p>We have setup 3 virtual machines，each has 1 cpu and 1GB memory. Details：</p><table><thead><tr><th align="center">Server OS</th><th align="center">IP Address</th><th align="center">Node Type</th><th align="center">CPU</th><th align="center">Memory</th><th align="center">Hostname</th></tr></thead><tbody><tr><td align="center">ubuntu16.04</td><td align="center">192.168.56.103</td><td align="center">master</td><td align="center">1</td><td align="center">1G</td><td align="center">server01</td></tr><tr><td align="center">ubuntu16.04</td><td align="center">192.168.56.104</td><td align="center">slave1</td><td align="center">1</td><td align="center">1G</td><td align="center">server02</td></tr><tr><td align="center">ubuntu16.04</td><td align="center">192.168.56.105</td><td align="center">slave2</td><td align="center">1</td><td align="center">1G</td><td align="center">server03</td></tr></tbody></table><blockquote><p>To follow this demo, root privilege is required, ask system admin (Todd) for root access.</p></blockquote><a id="more"></a><h2 id="Startup-all-nodes"><a href="#Startup-all-nodes" class="headerlink" title="Startup all nodes"></a>Startup all nodes</h2><p>Login to the system then start virtualBox and each virtual machine.</p><h3 id="Launch-VirtualBox"><a href="#Launch-VirtualBox" class="headerlink" title="Launch VirtualBox"></a>Launch VirtualBox</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> get root privilege</span><br><span class="line"><span class="meta">$</span> sudo -s</span><br><span class="line"><span class="meta">#</span> Then start master, slave1 and slave2 virtual machines </span><br><span class="line"><span class="meta">$</span> virtualbox</span><br></pre></td></tr></table></figure><h3 id="Login-to-each-node"><a href="#Login-to-each-node" class="headerlink" title="Login to each node"></a>Login to each node</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> Login as: main</span><br><span class="line"><span class="meta">#</span> passwd: 000000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> And get root priviledge on each node</span><br><span class="line"><span class="meta">$</span> sudo -s</span><br></pre></td></tr></table></figure><h3 id="Check-system-information-on-each-node"><a href="#Check-system-information-on-each-node" class="headerlink" title="Check system information on each node"></a>Check system information on each node</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> check ip address</span><br><span class="line"><span class="meta">$</span> ifconfig</span><br><span class="line"><span class="meta">#</span> check running containers</span><br><span class="line"><span class="meta">$</span> docker ps</span><br><span class="line"><span class="meta">#</span> check services &amp; ports</span><br><span class="line"><span class="meta">$</span> netstat -nltp</span><br></pre></td></tr></table></figure><blockquote><p>On master node, one should see services and their port numbers: <em>kube-apiserver : 6443/8080, etcd : 2379/2380, kube-scheduler : 10251, kube-controller : 10252, calico-felix : 9099</em></p></blockquote><blockquote><p>On worker nodes, one should see services and their port numbers: <em>kubelet : 4194/10248/10250/10255, kube-proxy:10249/10256, calico-felix : 9099</em></p></blockquote><h2 id="Commonly-used-commands"><a href="#Commonly-used-commands" class="headerlink" title="Commonly used commands"></a>Commonly used commands</h2><h3 id="Use-calico-to-check-the-network-status-on-each-node"><a href="#Use-calico-to-check-the-network-status-on-each-node" class="headerlink" title="Use calico to check the network status on each node"></a>Use calico to check the network status on each node</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> calicoctl node status</span><br></pre></td></tr></table></figure><blockquote><p>At each node, it should be able to see the other two nodes’ ip addresses in the cluster.</p></blockquote><h3 id="Use-kubectl-on-master-node-to-verify-the-cluster-resources-deloyment-nodes-pods-services-etc"><a href="#Use-kubectl-on-master-node-to-verify-the-cluster-resources-deloyment-nodes-pods-services-etc" class="headerlink" title="Use kubectl on master node to verify the cluster resources (deloyment, nodes, pods, services, etc.)"></a>Use kubectl on master node to verify the cluster resources (deloyment, nodes, pods, services, etc.)</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> check server/client version</span><br><span class="line"><span class="meta">$</span> kubectl version</span><br><span class="line"><span class="meta">#</span> get workers</span><br><span class="line"><span class="meta">$</span> kubectl get node</span><br><span class="line"><span class="meta">#</span> get pods</span><br><span class="line"><span class="meta">$</span> kubectl get pods</span><br><span class="line"><span class="meta">#</span> get deployment</span><br><span class="line"><span class="meta">$</span> kubectl get deploy</span><br><span class="line"><span class="meta">#</span> get services</span><br><span class="line"><span class="meta">$</span> kubectl get svc</span><br></pre></td></tr></table></figure><h3 id="More-kubectl-commands"><a href="#More-kubectl-commands" class="headerlink" title="More kubectl commands"></a>More kubectl commands</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl run kubernetes-bootcamp --image=jocatalin/kubernetes-bootcamp:v1 --port=8080</span><br><span class="line"><span class="meta">#</span> check deploy/pods again</span><br><span class="line"><span class="meta">$</span> kubectl get deploy</span><br><span class="line"><span class="meta">$</span> kubectl get pods</span><br><span class="line"><span class="meta">#</span> i.e. NAME: kubernetes-bootcamp-6b7849c495-p7dsw</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Then check log of the pod</span><br><span class="line"><span class="meta">$</span> kubectl logs kubernetes-bootcamp-6b7849c495-p7dsw -f</span><br><span class="line"><span class="meta">#</span> (ctrl-c out the following log)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> describe pod</span><br><span class="line"><span class="meta">$</span> kubectl describe pods kubernetes-bootcamp-6b7849c495-p7dsw</span><br><span class="line"><span class="meta">#</span> (Find the Mounts:/var/run/secrets/kubernetes.io/serviceaccount in the description)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Enter the running pod and verify the above path</span><br><span class="line"><span class="meta">$</span> kubectl exec -it kubernetes-bootcamp-6b7849c495-p7dsw bash</span><br><span class="line"><span class="meta">#</span> Find out the certificate files in that path</span><br><span class="line"><span class="meta">$</span> ls -l /var/run/secrets/kubernetes.io/serviceaccount </span><br><span class="line"><span class="meta">#</span> Exit the pod</span><br><span class="line"><span class="meta">$</span> exit</span><br><span class="line"><span class="meta">#</span> These ca files are actually associate with the ca account, check that info by:</span><br><span class="line"><span class="meta">$</span> kubectl get sa -o yaml</span><br><span class="line"><span class="meta">#</span> can also output other pattern, e.g. json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> check the "secret"</span><br><span class="line"><span class="meta">$</span> kubectl get secrets -o yaml</span><br><span class="line"><span class="meta">#</span> (The content of this secret has 3 sections that are mounted as three files in each pod as we see in above)</span><br></pre></td></tr></table></figure><blockquote><p>The “secret” are mounted to each created pod as files located in /var/run/secrets/… so that each pod can connect with api-server with https requests.</p></blockquote><h3 id="Use-‘apply’-or-‘create’-with-yaml-files"><a href="#Use-‘apply’-or-‘create’-with-yaml-files" class="headerlink" title="Use ‘apply’ or ‘create’ with yaml files"></a>Use ‘apply’ or ‘create’ with yaml files</h3><p>Kubectl ‘apply’ command is similar to ‘create’ command, but has rich properties.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd services</span><br><span class="line"><span class="meta">#</span> Create a nginx pod and verify</span><br><span class="line"><span class="meta">$</span> kubectl apply -f nginx-pod.yaml</span><br><span class="line"><span class="meta">$</span> kubectl describe pod nginx</span><br><span class="line"><span class="meta">#</span> (version here used is 1.7.9)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vi nginx-pod.yaml and change image:nginx:1.7.9 -&gt; image:nginx:1.13, re-apply the yaml file</span><br><span class="line"><span class="meta">$</span> kubectl apply -f nginx-pod.yaml</span><br><span class="line"><span class="meta">#</span> (version here is now 1.13)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Another way to change version of running image is to use 'set' command</span><br><span class="line"><span class="meta">$</span> kubectl set image pods nginx nginx=nginx:1.7.9</span><br><span class="line"><span class="meta">#</span> (reset the version to 1.7.9)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 'apply' command can be also used to create other resources</span><br><span class="line"><span class="meta">$</span> kubectl apply -f nginx-deployment.yaml</span><br><span class="line"><span class="meta">$</span> kubectl apply -f nginx-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Check the service is runing</span><br><span class="line"><span class="meta">$</span> curl 192.168.56.104:20000</span><br><span class="line"><span class="meta">$</span> curl 192.168.56.105:20000</span><br><span class="line"><span class="meta">#</span> (Nginx welcome page should be displayed)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Verify the service</span><br><span class="line"><span class="meta">$</span> kubectl get svc</span><br><span class="line"><span class="meta">#</span> (copy the CLUSTER-IP for nginx-service here, e.g. 10.68.33.239) </span><br><span class="line"><span class="meta">#</span> Use busybox image (sandbox within the cluster) for testing</span><br><span class="line"><span class="meta">$</span> kubectl delete pod busybox</span><br><span class="line"><span class="meta">$</span> kubectl run busybox --rm=true --image=busybox --restart=Never --tty -i</span><br><span class="line"><span class="meta">#</span> In busybox container access nginx service with kube-proxy</span><br><span class="line"><span class="meta">$</span> wget -qO - 10.68.33.239:8080</span><br><span class="line"><span class="meta">#</span> One can also access the service directly through service name</span><br><span class="line"><span class="meta">$</span> wget -qO - nginx-service:8080</span><br><span class="line"><span class="meta">#</span> exit</span><br><span class="line"><span class="meta">$</span> exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> clear-out the cluster after this demo session</span><br><span class="line"><span class="meta">$</span> kubectl delete -f nginx-pod.yaml</span><br><span class="line"><span class="meta">$</span> kubectl delete -f nginx-deployment.yaml</span><br><span class="line"><span class="meta">$</span> kubectl delete -f nginx-service.yaml</span><br><span class="line"><span class="meta">$</span> kubectl delete deploy kubernetes-bootcamp</span><br></pre></td></tr></table></figure><h2 id="Recommended-references"><a href="#Recommended-references" class="headerlink" title="Recommended references"></a>Recommended references</h2><p>Following YouTube links also provide some examples worth trying out:</p><p>[1] <a href="https://www.youtube.com/watch?v=K1HuOLzPSpU" target="_blank" rel="noopener">https://www.youtube.com/watch?v=K1HuOLzPSpU</a></p><p>[2] <a href="https://www.youtube.com/watch?v=yu3HlOXoEKk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=yu3HlOXoEKk</a></p><p>[3] <a href="https://www.youtube.com/watch?v=kvQ3VT_wH98" target="_blank" rel="noopener">https://www.youtube.com/watch?v=kvQ3VT_wH98</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Demo-of-Kubernetes-Basics&quot;&gt;&lt;a href=&quot;#Demo-of-Kubernetes-Basics&quot; class=&quot;headerlink&quot; title=&quot;Demo of Kubernetes Basics&quot;&gt;&lt;/a&gt;Demo of Kubernetes Basics&lt;/h1&gt;&lt;h2 id=&quot;Server-Overview&quot;&gt;&lt;a href=&quot;#Server-Overview&quot; class=&quot;headerlink&quot; title=&quot;Server Overview&quot;&gt;&lt;/a&gt;Server Overview&lt;/h2&gt;&lt;p&gt;We have setup 3 virtual machines，each has 1 cpu and 1GB memory. Details：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Server OS&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;IP Address&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Node Type&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;CPU&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Memory&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Hostname&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;ubuntu16.04&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.56.103&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;master&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1G&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;server01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;ubuntu16.04&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.56.104&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;slave1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1G&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;server02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;ubuntu16.04&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.56.105&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;slave2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1G&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;server03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;To follow this demo, root privilege is required, ask system admin (Todd) for root access.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="k8s" scheme="https://ruby-.github.io/categories/k8s/"/>
    
    
      <category term="k8s, demo" scheme="https://ruby-.github.io/tags/k8s-demo/"/>
    
  </entry>
  
</feed>
