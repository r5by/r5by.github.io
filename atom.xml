<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ruby-&#39;s Blog</title>
  
  <subtitle>Re 爆肝魔王幹部的地球之旅</subtitle>
  <link href="/ruby-.github.io/atom.xml" rel="self"/>
  
  <link href="https://ruby-.github.io/"/>
  <updated>2019-10-01T13:56:24.000Z</updated>
  <id>https://ruby-.github.io/</id>
  
  <author>
    <name>R5by</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k3s-basics</title>
    <link href="https://ruby-.github.io/2019/09/29/k3s-basics/"/>
    <id>https://ruby-.github.io/2019/09/29/k3s-basics/</id>
    <published>2019-09-29T22:45:11.000Z</published>
    <updated>2019-10-01T13:56:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="My-First-Impression-on-K3S"><a href="#My-First-Impression-on-K3S" class="headerlink" title="My First Impression on K3S"></a>My First Impression on K3S</h1><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>In order to work on k3s project, one needs to learn to use it at first. This post summarize the main steps of deploying <a href="https://github.com/rancher/k3s" target="_blank" rel="noopener">k3s</a> on my local environment, and how to setup the development environment.</p><a id="more"></a><h2 id="Running-Environment-Setup"><a href="#Running-Environment-Setup" class="headerlink" title="Running Environment Setup"></a>Running Environment Setup</h2><p>The basic hardware setup is as the same as my last post on k8s demo (3 VMs).</p><h3 id="Step-1-Stop-the-previously-installed-k8s-related-services-optional"><a href="#Step-1-Stop-the-previously-installed-k8s-related-services-optional" class="headerlink" title="Step 1: Stop the previously installed k8s related services (optional)"></a>Step 1: Stop the previously installed k8s related services (optional)</h3><p>On master node:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service kube-calico stop</span><br><span class="line">service kube-scheduler stop</span><br><span class="line">service kube-controller-manager stop</span><br><span class="line">service kube-apiserver stop</span><br><span class="line">service etcd stop &amp;&amp; rm -fr /var/lib/etcd/*</span><br></pre></td></tr></table></figure><p>On worker nodes:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service kubelet stop &amp;&amp; rm -fr /var/lib/kubelet/*</span><br><span class="line">service kube-proxy stop &amp;&amp; rm -fr /var/lib/kube-proxy/*</span><br><span class="line">service kube-calico stop</span><br></pre></td></tr></table></figure><blockquote><p>Here I simply turn k8s off to avoid potential conflicts between k8s and k3s deployment. However this is just my assumption, they may perfectly work together after all.</p></blockquote><h3 id="Step-2-Deploy-k3s-on-each-node"><a href="#Step-2-Deploy-k3s-on-each-node" class="headerlink" title="Step 2: Deploy k3s on each node"></a>Step 2: Deploy k3s on each node</h3><p>To install k3s is quite simple, we will use the following commands install and start k3s on master and two worker machines separately.</p><p>On master node:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install k3s with rancher script</span></span><br><span class="line"><span class="comment"># The script download the binaries, pull the images (containerd) and enable/start the k3s-related systemctl services</span></span><br><span class="line">mkdir k3s</span><br><span class="line"></span><br><span class="line"><span class="comment"># With INSTALL_K3S_EXEC="--disable-agent" option, one may launch k3s server on the node without an agent (which may cause some issues with current release of k3s)</span></span><br><span class="line">curl -sfL https://get.k3s.io | INSTALL_K3S_BIN_DIR=<span class="string">"/home/main/k3s"</span> INSTALL_K3S_VERSION=<span class="string">"v0.1.0"</span>  sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify the k3s system services are listening on their ports</span></span><br><span class="line">netstat -nltp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify the k3s cluster status</span></span><br><span class="line">systemctl status k3s</span><br></pre></td></tr></table></figure><blockquote><p>On master node, one should see services and their port numbers: <em>k3s : 6443/6444, 10251/10252</em></p></blockquote><p>After installation, the k3s binary folder looks like this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── crictl -&gt; k3s</span><br><span class="line">├── k3s</span><br><span class="line">├── k3s-killall.sh</span><br><span class="line">└── k3s-uninstall.sh</span><br></pre></td></tr></table></figure><blockquote><p>With out the INSTALL_K3S_BIN_DIR option, k3s will be installed at /usr/local/bin</p></blockquote><p>Now, in order to join new workers to this master node, one needs first grab the token on that (master) node:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/rancher/k3s/server/node-token</span><br></pre></td></tr></table></figure><p>On worker nodes:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir k3s</span><br><span class="line"></span><br><span class="line"><span class="comment"># download &amp; active the k3s-agent service</span></span><br><span class="line">curl -sfL https://get.k3s.io | INSTALL_K3S_BIN_DIR=<span class="string">"/home/main/k3s"</span> INSTALL_K3S_VERSION=<span class="string">"v0.1.0"</span> K3S_TOKEN=<span class="string">"K1069e9389280a39cfeefb5b17cc43bee8c1a357946fb40c0b5734d6226be4c2eb6::node:2c22cc54a2816ea6d01da73ab56e26b3"</span> K3S_URL=<span class="string">"https://192.168.56.103:6443"</span> sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the service status</span></span><br><span class="line">systemctl status k3s-agent</span><br></pre></td></tr></table></figure><p>The installation of k3s agent on worker nodes looks like this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── crictl -&gt; k3s</span><br><span class="line">├── k3s</span><br><span class="line">├── k3s-agent-uninstall.sh</span><br><span class="line">└── k3s-killall.sh</span><br></pre></td></tr></table></figure><blockquote><p>On worker node, k3s has services and ports: <em>k3s : 42323, containerd : 10010</em></p></blockquote><p>Now on the master node, one should be able to verify the newly added cluster resources:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">k3s kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kill k3s services after inspection (on each node)</span></span><br><span class="line">k3s-killall.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninstall k3s on master</span></span><br><span class="line">k3s-uninstall.sh</span><br><span class="line"><span class="comment"># Uninstall k3s on worker nodes</span></span><br><span class="line">k3s-agent-uninstall.sh</span><br></pre></td></tr></table></figure><h2 id="Dev-Environment-Setup"><a href="#Dev-Environment-Setup" class="headerlink" title="Dev Environment Setup"></a>Dev Environment Setup</h2><p>To be continued…</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Ranger k3s is much smaller and easier to deploy compared to Kubernetes. The new version (0.8.3 due to the time of this post) of k3s has some problems with the joining of an agent to the master node, thus the first release version (0.1.0) was used in this demo, later I’ll test to see a newer version that doesn’t have the problem and switch my dev environment onto that branch.</p><p>In summery, k3s is lightweight and thus better fit for our research on edge computing in favor of time compared to k8s. </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;My-First-Impression-on-K3S&quot;&gt;&lt;a href=&quot;#My-First-Impression-on-K3S&quot; class=&quot;headerlink&quot; title=&quot;My First Impression on K3S&quot;&gt;&lt;/a&gt;My First Impression on K3S&lt;/h1&gt;&lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;In order to work on k3s project, one needs to learn to use it at first. This post summarize the main steps of deploying &lt;a href=&quot;https://github.com/rancher/k3s&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;k3s&lt;/a&gt; on my local environment, and how to setup the development environment.&lt;/p&gt;
    
    </summary>
    
    
      <category term="edge" scheme="https://ruby-.github.io/categories/edge/"/>
    
    
      <category term="k3s, k8s" scheme="https://ruby-.github.io/tags/k3s-k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s-basics</title>
    <link href="https://ruby-.github.io/2019/09/17/k8s-basics/"/>
    <id>https://ruby-.github.io/2019/09/17/k8s-basics/</id>
    <published>2019-09-18T01:56:46.000Z</published>
    <updated>2019-09-18T17:48:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Demo-of-Kubernetes-Basics"><a href="#Demo-of-Kubernetes-Basics" class="headerlink" title="Demo of Kubernetes Basics"></a>Demo of Kubernetes Basics</h1><h2 id="Server-Overview"><a href="#Server-Overview" class="headerlink" title="Server Overview"></a>Server Overview</h2><p>We have setup 3 virtual machines，each has 1 cpu and 1GB memory. Details：</p><table><thead><tr><th align="center">Server OS</th><th align="center">IP Address</th><th align="center">Node Type</th><th align="center">CPU</th><th align="center">Memory</th><th align="center">Hostname</th></tr></thead><tbody><tr><td align="center">ubuntu16.04</td><td align="center">192.168.56.103</td><td align="center">master</td><td align="center">1</td><td align="center">1G</td><td align="center">server01</td></tr><tr><td align="center">ubuntu16.04</td><td align="center">192.168.56.104</td><td align="center">slave1</td><td align="center">1</td><td align="center">1G</td><td align="center">server02</td></tr><tr><td align="center">ubuntu16.04</td><td align="center">192.168.56.105</td><td align="center">slave2</td><td align="center">1</td><td align="center">1G</td><td align="center">server03</td></tr></tbody></table><blockquote><p>To follow this demo, root privilege is required, ask system admin (Todd) for root access.</p></blockquote><a id="more"></a><h2 id="Startup-all-nodes"><a href="#Startup-all-nodes" class="headerlink" title="Startup all nodes"></a>Startup all nodes</h2><p>Login to the system then start virtualBox and each virtual machine.</p><h3 id="Launch-VirtualBox"><a href="#Launch-VirtualBox" class="headerlink" title="Launch VirtualBox"></a>Launch VirtualBox</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get root privilege</span></span><br><span class="line">$ sudo -s</span><br><span class="line"><span class="comment"># Then start master, slave1 and slave2 virtual machines </span></span><br><span class="line">$ virtualbox</span><br></pre></td></tr></table></figure><h3 id="Login-to-each-node"><a href="#Login-to-each-node" class="headerlink" title="Login to each node"></a>Login to each node</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ Login as: main</span><br><span class="line"><span class="comment"># passwd: 000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># And get root priviledge on each node</span></span><br><span class="line">$ sudo -s</span><br></pre></td></tr></table></figure><h3 id="Check-system-information-on-each-node"><a href="#Check-system-information-on-each-node" class="headerlink" title="Check system information on each node"></a>Check system information on each node</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check ip address</span></span><br><span class="line">$ ifconfig</span><br><span class="line"><span class="comment"># check running containers</span></span><br><span class="line">$ docker ps</span><br><span class="line"><span class="comment"># check services &amp; ports</span></span><br><span class="line">$ netstat -nltp</span><br></pre></td></tr></table></figure><blockquote><p>On master node, one should see services and their port numbers: <em>kube-apiserver : 6443/8080, etcd : 2379/2380, kube-scheduler : 10251, kube-controller : 10252, calico-felix : 9099</em></p></blockquote><blockquote><p>On worker nodes, one should see services and their port numbers: <em>kubelet : 4194/10248/10250/10255, kube-proxy:10249/10256, calico-felix : 9099</em></p></blockquote><h2 id="Commonly-used-commands"><a href="#Commonly-used-commands" class="headerlink" title="Commonly used commands"></a>Commonly used commands</h2><h3 id="Use-calico-to-check-the-network-status-on-each-node"><a href="#Use-calico-to-check-the-network-status-on-each-node" class="headerlink" title="Use calico to check the network status on each node"></a>Use calico to check the network status on each node</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ calicoctl node status</span><br></pre></td></tr></table></figure><blockquote><p>At each node, it should be able to see the other two nodes’ ip addresses in the cluster.</p></blockquote><h3 id="Use-kubectl-on-master-node-to-verify-the-cluster-resources-deloyment-nodes-pods-services-etc"><a href="#Use-kubectl-on-master-node-to-verify-the-cluster-resources-deloyment-nodes-pods-services-etc" class="headerlink" title="Use kubectl on master node to verify the cluster resources (deloyment, nodes, pods, services, etc.)"></a>Use kubectl on master node to verify the cluster resources (deloyment, nodes, pods, services, etc.)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check server/client version</span></span><br><span class="line">$ kubectl version</span><br><span class="line"><span class="comment"># get workers</span></span><br><span class="line">$ kubectl get node</span><br><span class="line"><span class="comment"># get pods</span></span><br><span class="line">$ kubectl get pods</span><br><span class="line"><span class="comment"># get deployment</span></span><br><span class="line">$ kubectl get deploy</span><br><span class="line"><span class="comment"># get services</span></span><br><span class="line">$ kubectl get svc</span><br></pre></td></tr></table></figure><h3 id="More-kubectl-commands"><a href="#More-kubectl-commands" class="headerlink" title="More kubectl commands"></a>More kubectl commands</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run kubernetes-bootcamp --image=jocatalin/kubernetes-bootcamp:v1 --port=8080</span><br><span class="line"><span class="comment"># check deploy/pods again</span></span><br><span class="line">$ kubectl get deploy</span><br><span class="line">$ kubectl get pods</span><br><span class="line"><span class="comment"># i.e. NAME: kubernetes-bootcamp-6b7849c495-p7dsw</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Then check log of the pod</span></span><br><span class="line">$ kubectl logs kubernetes-bootcamp-6b7849c495-p7dsw -f</span><br><span class="line"><span class="comment"># (ctrl-c out the following log)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># describe pod</span></span><br><span class="line">$ kubectl describe pods kubernetes-bootcamp-6b7849c495-p7dsw</span><br><span class="line"><span class="comment"># (Find the Mounts:/var/run/secrets/kubernetes.io/serviceaccount in the description)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enter the running pod and verify the above path</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it kubernetes-bootcamp-6b7849c495-p7dsw bash</span><br><span class="line"><span class="comment"># Find out the certificate files in that path</span></span><br><span class="line">$ ls -l /var/run/secrets/kubernetes.io/serviceaccount </span><br><span class="line"><span class="comment"># Exit the pod</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line"><span class="comment"># These ca files are actually associate with the ca account, check that info by:</span></span><br><span class="line">$ kubectl get sa -o yaml</span><br><span class="line"><span class="comment"># can also output other pattern, e.g. json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check the "secret"</span></span><br><span class="line">$ kubectl get secrets -o yaml</span><br><span class="line"><span class="comment"># (The content of this secret has 3 sections that are mounted as three files in each pod as we see in above)</span></span><br></pre></td></tr></table></figure><blockquote><p>The “secret” are mounted to each created pod as files located in /var/run/secrets/… so that each pod can connect with api-server with https requests.</p></blockquote><h3 id="Use-‘apply’-or-‘create’-with-yaml-files"><a href="#Use-‘apply’-or-‘create’-with-yaml-files" class="headerlink" title="Use ‘apply’ or ‘create’ with yaml files"></a>Use ‘apply’ or ‘create’ with yaml files</h3><p>Kubectl ‘apply’ command is similar to ‘create’ command, but has rich properties.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> services</span><br><span class="line"><span class="comment"># Create a nginx pod and verify</span></span><br><span class="line">$ kubectl apply -f nginx-pod.yaml</span><br><span class="line">$ kubectl describe pod nginx</span><br><span class="line"><span class="comment"># (version here used is 1.7.9)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vi nginx-pod.yaml and change image:nginx:1.7.9 -&gt; image:nginx:1.13, re-apply the yaml file</span></span><br><span class="line">$ kubectl apply -f nginx-pod.yaml</span><br><span class="line"><span class="comment"># (version here is now 1.13)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Another way to change version of running image is to use 'set' command</span></span><br><span class="line">$ kubectl <span class="built_in">set</span> image pods nginx nginx=nginx:1.7.9</span><br><span class="line"><span class="comment"># (reset the version to 1.7.9)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 'apply' command can be also used to create other resources</span></span><br><span class="line">$ kubectl apply -f nginx-deployment.yaml</span><br><span class="line">$ kubectl apply -f nginx-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the service is runing</span></span><br><span class="line">$ curl 192.168.56.104:20000</span><br><span class="line">$ curl 192.168.56.105:20000</span><br><span class="line"><span class="comment"># (Nginx welcome page should be displayed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify the service</span></span><br><span class="line">$ kubectl get svc</span><br><span class="line"><span class="comment"># (copy the CLUSTER-IP for nginx-service here, e.g. 10.68.33.239) </span></span><br><span class="line"><span class="comment"># Use busybox image (sandbox within the cluster) for testing</span></span><br><span class="line">$ kubectl delete pod busybox</span><br><span class="line">$ kubectl run busybox --rm=<span class="literal">true</span> --image=busybox --restart=Never --tty -i</span><br><span class="line"><span class="comment"># In busybox container access nginx service with kube-proxy</span></span><br><span class="line">$ wget -qO - 10.68.33.239:8080</span><br><span class="line"><span class="comment"># One can also access the service directly through service name</span></span><br><span class="line">$ wget -qO - nginx-service:8080</span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear-out the cluster after this demo session</span></span><br><span class="line">$ kubectl delete -f nginx-pod.yaml</span><br><span class="line">$ kubectl delete -f nginx-deployment.yaml</span><br><span class="line">$ kubectl delete -f nginx-service.yaml</span><br><span class="line">$ kubectl delete deploy kubernetes-bootcamp</span><br></pre></td></tr></table></figure><h2 id="Recommended-references"><a href="#Recommended-references" class="headerlink" title="Recommended references"></a>Recommended references</h2><p>Following YouTube links also provide some examples worth trying out:</p><p>[1] <a href="https://www.youtube.com/watch?v=K1HuOLzPSpU" target="_blank" rel="noopener">https://www.youtube.com/watch?v=K1HuOLzPSpU</a></p><p>[2] <a href="https://www.youtube.com/watch?v=yu3HlOXoEKk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=yu3HlOXoEKk</a></p><p>[3] <a href="https://www.youtube.com/watch?v=kvQ3VT_wH98" target="_blank" rel="noopener">https://www.youtube.com/watch?v=kvQ3VT_wH98</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Demo-of-Kubernetes-Basics&quot;&gt;&lt;a href=&quot;#Demo-of-Kubernetes-Basics&quot; class=&quot;headerlink&quot; title=&quot;Demo of Kubernetes Basics&quot;&gt;&lt;/a&gt;Demo of Kubernetes Basics&lt;/h1&gt;&lt;h2 id=&quot;Server-Overview&quot;&gt;&lt;a href=&quot;#Server-Overview&quot; class=&quot;headerlink&quot; title=&quot;Server Overview&quot;&gt;&lt;/a&gt;Server Overview&lt;/h2&gt;&lt;p&gt;We have setup 3 virtual machines，each has 1 cpu and 1GB memory. Details：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Server OS&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;IP Address&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Node Type&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;CPU&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Memory&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Hostname&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;ubuntu16.04&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.56.103&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;master&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1G&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;server01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;ubuntu16.04&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.56.104&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;slave1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1G&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;server02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;ubuntu16.04&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.56.105&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;slave2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1G&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;server03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;To follow this demo, root privilege is required, ask system admin (Todd) for root access.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="k8s" scheme="https://ruby-.github.io/categories/k8s/"/>
    
    
      <category term="k8s, demo" scheme="https://ruby-.github.io/tags/k8s-demo/"/>
    
  </entry>
  
</feed>
